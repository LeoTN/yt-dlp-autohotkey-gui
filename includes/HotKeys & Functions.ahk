#SingleInstance Force
#MaxThreadsPerHotkey 2
#Warn Unreachable, Off
SendMode "Input"
CoordMode "Mouse", "Client"

hotkey_onInit() {
    global isDownloading := false

    try
    {
        registerHotkeys()
    }
    catch {
        registerHotkeys()
    }
}

registerHotkeys() {
    ; Beginning of all standard script hotkeys.

    ; Main hotkey (start download).
    Hotkey(readConfigFile("DOWNLOAD_HK"), (*) => startDownload(buildCommandString()), "On")

    ; Second hotkey (collect URLs).
    Hotkey(readConfigFile("URL_COLLECT_HK"), (*) => saveSearchBarContentsToFile(), "On")

    ; Third hotkey (collect URLs from video thumbnail).
    Hotkey(readConfigFile("THUMBNAIL_URL_COLLECT_HK"), (*) => saveVideoURLDirectlyToFile(), "On")

    ; Hotkey to open Download Options GUI.
    Hotkey(readConfigFile("OPTIONS_GUI_HK"), (*) => hotkey_openOptionsGUI())
    ; Hotkey to termniate the script.
    Hotkey(readConfigFile("TERMINATE_SCRIPT_HK"), (*) => terminateScriptPrompt(), "Off")

    ; Hotkey to reload the script.
    Hotkey(readConfigFile("RELOAD_SCRIPT_HK"), (*) => reloadScriptPrompt(), "Off")

    ; Hotkey that is currently not used.
    Hotkey(readConfigFile("RESTORE_URL_FILE_HK"), (*) => MsgBox("Not implemented yet", , "T2"), "Off")

    ; Hotkey for clearing the URL file.
    Hotkey(readConfigFile("CLEAR_URL_FILE_HK"), (*) => clearURLFile(), "Off")

    ; Debug hotkey
    Hotkey("+^!F1", (*) => hotkey_toggleDebugMode(), "On")
}

; Hotkey support function to open the script download options GUI.
hotkey_openOptionsGUI() {
    try
    {
        static flipflop := true
        if (!WinExist("ahk_id " . downloadOptionsGUI.Hwnd)) {
            downloadOptionsGUI.Show("AutoSize")
            flipflop := false
        }
        else if (!flipflop && WinActive("ahk_id " . downloadOptionsGUI.Hwnd)) {
            downloadOptionsGUI.Hide()
            flipflop := true
        }
        else {
            WinActivate("ahk_id " . downloadOptionsGUI.Hwnd)
        }
    }
    global lastDownloadPath := ""
}

hotkey_toggleDebugMode() {
    if (readConfigFile("booleanDebugMode")) {
        editConfigFile("booleanDebugMode", false)
        MsgBox("Debug mode has been disabled.", "VD - DEBUG MODE", "O Iconi 262144 T1")
    }
    else if (!readConfigFile("booleanDebugMode")) {
        editConfigFile("booleanDebugMode", true)
        MsgBox("Debug mode has been enabled.", "VD - DEBUG MODE", "O Icon! 262144 T1")
    }
    else {
        throw ("No valid state in booleanDebugMode")
    }
}

/*
FUNCTION SECTION
-------------------------------------------------
*/

/*
Starts the download process by passing the parameter string generated by the main GUI to the console.
Serves as the main function to call sub download process functions.
@param pCommandString [String] The parameter / command string from the main GUI.
@param pBooleanSilent [boolean] If set to true, most progress related windows will be hidden.
*/
startDownload(pCommandString, pBooleanSilent := unset) {
    global isDownloading
    ; Collects all data from the download options GUI into the object.
    global downloadOptionsGUI_SubmitObject := downloadOptionsGUI.Submit()
    if (!IsSet(pBooleanSilent)) {
        pBooleanSilent := downloadOptionsGUI_SubmitObject.EnableSilentDownloadModeCheckbox

    }
    if (!checkInternetConnection()) {
        return MsgBox("Unable to connect to the Internet.`n`nPlease check your Internet connection.",
            "VD - No Internet Connection!", "O Icon! 262144 T2")
    }
    if (isDownloading) {
        return MsgBox("There is a download process running already.`n`nPlease wait for it to finish or cancel it.",
            "VD - Download Status", "O Icon! 262144 T2")
    }
    else {
        isDownloading := true
    }
    if (!WinExist("ahk_id " . downloadOptionsGUI.Hwnd)) {
        hotkey_openOptionsGUI()
    }
    else {
        WinActivate("ahk_id " . downloadOptionsGUI.Hwnd)
    }
    tmpConfig := readConfigFile("URL_FILE_LOCATION")
    SplitPath(tmpConfig, , &outDir)
    if (FileExist(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt")) {
        result := MsgBox("An URL file from an unfinished download has been found.`n`n"
            "Do you want do add the URLs to the current URL file?", "VD - Unfinished Download Found", "YN Icon! 262144"
        )
        switch (result) {
            case "Yes":
            {
                ; Writes the content from the last downloaded file to the new one.
                FileAppend(FileRead(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt"), tmpConfig)
            }
            Default:
            {
                try
                {
                    FileRecycle(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt")
                }
            }
        }
    }
    if (!FileExist(tmpConfig)) {
        MsgBox("No URL file found. You can save`nURLs by clicking on a video and`npressing: [" .
            expandHotkey(readConfigFile("URL_COLLECT_HK")) . "]", "VD - Download Status", "O Icon! 262144")
        isDownloading := false
        return
    }
    if (downloadOptionsGUI_SubmitObject.ClearURLFileAfterDownloadCheckbox) {
        FileMove(tmpConfig, outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt", true)
    }
    else {
        FileCopy(tmpConfig, outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt", true)
    }
    if (pBooleanSilent) {
        ; Execute the command line command and wait for it to be finished, but all progess related windows are hidden.
        executeAndLogConsoleCommand(pCommandString, true)
        monitorDownloadProgress()
    }
    else {
        ; Same as above, but windows aren't hidden.
        executeAndLogConsoleCommand(pCommandString, false)
        monitorDownloadProgress()
    }
    postProcessDownloadFiles()
    saveGUISettingsAsPreset("last_settings", true)
    ; Moves the downloaded URLs to the URL backup file.
    if (FileExist(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt")) {
        FileMove(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt", readConfigFile("URL_BACKUP_FILE_LOCATION"), true)
    }
    ; This one uses the actual checkbox from the download options GUI instead of the GUI submit object.
    if (terminateScriptAfterDownloadCheckbox.Value) {
        isDownloading := false
        if (!downloadOptionsGUI_SubmitObject.EnableSilentDownloadModeCheckbox) {
            terminateScriptPrompt()
        }
        else {
            ExitApp()
            ExitApp()
        }
    }
    else {
        switch (downloadOptionsGUI_SubmitObject.UseDefaultDownloadLocationCheckbox) {
            case 0:
            {
                global lastDownloadPath := downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . '\' .
                    downloadTime
            }
            case 1:
            {
                global lastDownloadPath := readConfigFile("DOWNLOAD_PATH") . '\' . downloadTime
            }
        }
        isDownloading := false
    }
}

/*
Executes a given string with the command prompt.
@param pCommand [String] The command (most likely the download command string).
@param pBooleanSilent [boolean] If set to true, the command line window will be hidden.
*/
executeAndLogConsoleCommand(pCommand, pBooleanSilent) {
    global hiddenConsolePID := 0
    global visualPowershellPID := 0

    Run(A_ComSpec . ' /c title Download is running... & ' . pCommand . ' > "' . A_Temp
        . '\yt_dlp_download_log.txt" && title Completed... && timeout /T 3', , "Min", &hiddenConsolePID)
    ProcessWait(hiddenConsolePID)

    if (!pBooleanSilent) {
        ; Deletes the old log file.
        try
        {
            FileDelete(A_Temp . "\yt_dlp_download_log.txt")
        }
        ; The powershell script now waits for the hook file.
        Run('powershell.exe -noLogo -noProfile -executionPolicy bypass -file "'
            . psDownloadProgressVisualizerLocation . '"', , "Min", &visualPowershellPID)
        WinWait("ahk_pid " . visualPowershellPID)
        WinActivate("ahk_pid " . visualPowershellPID)
    }
}

; Checks the download log file for status updates and reacts by updating the download options GUI progress bar and text fields.
monitorDownloadProgress() {
    global booleanDownloadTerminated := false
    SplitPath(readConfigFile("URL_FILE_LOCATION"), , &outDir)
    global urlArray := readFile(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt", true)
    global videoAmount := urlArray.Length
    global downloadedVideoAmount := 0
    global skippedVideoArchiveAmount := 0
    global skippedVideoPresentAmount := 0
    global skippedVideoMaxSizeAmount := 0
    maximumBarValue := videoAmount * 100
    currentBarValue := 0
    partProgress := 0
    ; This variable needs to exist because yt-dlp spams the file to large message which causes a lot of trouble.
    booleanSkippingLocked := false
    booleanWaitForVideoDownload := true
    parsedLines := 0
    ; Prepares the download options GUI.
    downloadStatusProgressBar.Opt("Range0-" . maximumBarValue)
    downloadStatusProgressBar.Value := 0
    if (downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
        downloadStatusText.Text := "Playlist mode: " . downloadedVideoAmount . " video(s) processed."
    }
    else {
        downloadStatusText.Text := "Downloaded " . downloadedVideoAmount . " out of " . videoAmount . " videos."
    }

    ; Waits for the download log file to exist.
    maxRetries := 10
    while (!FileExist(A_Temp . "\yt_dlp_download_log.txt")) {
        Sleep(1000)
        if (maxRetries <= 0) {
            MsgBox("Could not find hook file to track progress.`n`nScript terminated.", "VD - Download Status - Error!",
                "O IconX 262144")
            ExitApp()
            ExitApp()
        }
        maxRetries--
    }
startOfFileReadLoop:
    loop read (A_Temp . "\yt_dlp_download_log.txt") {
        ; All previous lines will be skipped.
        if (parsedLines >= A_Index) {
            continue
        }
        ; Makes the script skip all other download percentage values so that the progress bar does only fill when
        ; downloading the actual video.
        if (booleanWaitForVideoDownload) {
            ; Makes sure that the the progress bar is not unlocked by messages like "Deleting file" etc.
            if (InStr(A_LoopReadLine, "[download] Destination:")) {
                tmp_Line := A_LoopReadLine
                loop (downloadVideoFormatArray.Length) {
                    if (InStr(tmp_Line, "." . downloadVideoFormatArray.Get(A_Index))) {
                        booleanWaitForVideoDownload := false
                    }
                }
            }
        }
        ; Scanns the output from the console and extracts the download progress percentage values.
        else if (RegExMatch(A_LoopReadLine, "S)[\d]+[.][\d{1}][%]", &outMatch) != 0 && partProgress < 100) {
            outString := outMatch[]
            outStringReady := StrReplace(outString, "%")
            outNumberReady := Number(outStringReady)
            ; This avoids filling the progress bar to fast because of too many 100% messages from yt-dlp.
            if (outNumberReady < 100) {
                partProgress := outNumberReady
            }
            ; This marks the end of the download process of the video.
            ; It also deactivates the second if condition above.
            else if (outNumberReady = 100) {
                partProgress := 100
            }
        }
        ; The already recorded message is important because the progress bar has to move up one video to avoid issues.
        if (InStr(A_LoopReadLine, "has already been recorded in the archive")) {
            booleanWaitForVideoDownload := true
            skippedVideoArchiveAmount++
            partProgress := 0
            downloadStatusText.Text := skippedVideoArchiveAmount . " video(s) already in archive file."
            ; Calculates the progress bar value with all videos processed.
            tmpResult := downloadedVideoAmount + skippedVideoArchiveAmount + skippedVideoPresentAmount +
                skippedVideoMaxSizeAmount
            currentBarValue := tmpResult * 100
            ; Applies the changes to the GUI progress bar.
            downloadStatusProgressBar.Value := currentBarValue
            Sleep(100)
        }
        ; Same thing as above.
        else if (InStr(A_LoopReadLine, "has already been downloaded")) {
            booleanWaitForVideoDownload := true
            skippedVideoPresentAmount++
            partProgress := 0
            downloadStatusText.Text := skippedVideoPresentAmount . " video(s) already present."
            ; Calculates the progress bar value with all videos processed.
            tmpResult := downloadedVideoAmount + skippedVideoArchiveAmount + skippedVideoPresentAmount +
                skippedVideoMaxSizeAmount
            currentBarValue := tmpResult * 100
            ; Applies the changes to the GUI progress bar.
            downloadStatusProgressBar.Value := currentBarValue
            Sleep(100)
        }
        ; This message indicates that the video will be skipped because it is larger than the selected filesize.
        else if (InStr(A_LoopReadLine, "does not pass filter (filesize_approx<" .
            downloadOptionsGUI_SubmitObject.MaxDownloadSizeEdit . "M)")) {
            if (!booleanSkippingLocked) {
                booleanWaitForVideoDownload := true
                booleanSkippingLocked := true
                skippedVideoMaxSizeAmount++
                partProgress := 0
                downloadStatusText.Text := skippedVideoMaxSizeAmount . " video(s) larger than maximum filesize."
                ; Calculates the progress bar value with all videos processed.
                tmpResult := downloadedVideoAmount + skippedVideoArchiveAmount + skippedVideoPresentAmount +
                    skippedVideoMaxSizeAmount
                currentBarValue := tmpResult * 100
                ; Applies the changes to the GUI progress bar.
                downloadStatusProgressBar.Value := currentBarValue
                Sleep(100)
            }
        }
        ; This message only appears when the previous video processing has been finished.
        ; NOTE: Does only work when using a temp directory as parameter!
        else if (InStr(A_LoopReadLine, "[MoveFiles] Moving file")) {
            if (partProgress = 100) {
                booleanWaitForVideoDownload := true
                downloadedVideoAmount++
                partProgress := 0
                if (downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
                    downloadStatusText.Text := "Playlist mode: " . downloadedVideoAmount . " video(s) processed."
                }
                else {
                    downloadStatusText.Text := "Downloaded " . downloadedVideoAmount . " out of " . videoAmount .
                        " videos."
                }
            }
        }
        else if (booleanSkippingLocked) {
            ; When a video is skipped this method is used to detect if a new video is beeing processed.
            if (InStr(A_LoopReadLine, "Extracting URL: https://www")) {
                ; "[youtube:tab]" is considered to be ignored, as it only shows up when downloading a playlist.
                if (!InStr(A_LoopReadLine, "[youtube:tab] Extracting URL: https://www")) {
                    ; When a new video is beeing processed, skipping it will be unlocked.
                    booleanSkippingLocked := false
                }
            }
        }
        if (!downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
            ; Calculates the progress bar value with all videos processed.
            tmpResult := downloadedVideoAmount + skippedVideoArchiveAmount + skippedVideoPresentAmount +
                skippedVideoMaxSizeAmount
            currentBarValue := tmpResult * 100 + partProgress
            ; Applies the changes to the GUI progress bar.
            downloadStatusProgressBar.Value := currentBarValue
        }
        else {
            ; This makes sure that the progress animation is still displayed.
            downloadStatusProgressBar.Value := maximumBarValue - 1
        }
        parsedLines++
    }
    ; When the loop reaches the file end it will check if the console log has reached it's end.
    ; In other terms if the downloads have completed or not.
    while (ProcessExist(hiddenConsolePID)) {
        ; Saves the content of the download log file.
        ; Because the console only adds content it is a reliable method to detect added data to the .txt file.
        oldFileContent := FileRead(A_Temp . "\yt_dlp_download_log.txt")
        ; Wait for the console log to be changed.
        Sleep(5000)
        newFileContent := FileRead(A_Temp . "\yt_dlp_download_log.txt")

        if (oldFileContent != newFileContent && !booleanDownloadTerminated) {
            ; If there is new data and the download is still running.
            goto startOfFileReadLoop
        }
    }
    ; Download finish section.
    downloadStatusText.Text := "Final video processing..."
    ; Makes sure the log powershell windows is closed as well.
    try
    {
        WinClose("ahk_pid " . visualPowershellPID)
    }
    Sleep(500)
    if (booleanDownloadTerminated) {
        downloadStatusProgressBar.Value := 0
        downloadStatusText.Text := "Download canceled."
    }
    else {
        downloadStatusProgressBar.Value := maximumBarValue
        if (downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
            downloadStatusText.Text := "Playlist mode: " . downloadedVideoAmount . " video(s) processed."
        }
        else {
            downloadStatusText.Text := "Downloaded " . downloadedVideoAmount . " out of " . videoAmount . " videos."
        }
    }
    if (!downloadOptionsGUI_SubmitObject.enableSilentDownloadModeCheckbox) {
        MsgBox("Total video amount: " . videoAmount .
            "`nSkipped Videos (already in archive): " . skippedVideoArchiveAmount .
            "`nSkipped Videos (already present): " . skippedVideoPresentAmount .
            "`nSkipped Videos (too large): " . skippedVideoMaxSizeAmount .
            "`nDownloaded Videos: " . downloadedVideoAmount, "VD - Download Summary", "O Iconi T5")
    }
}

; Adds time, date and further information into the text files. Might also make .JSON comment files prettier in the future.
postProcessDownloadFiles() {
    tmpConfig := readConfigFile("DOWNLOAD_PATH")
    if (readConfigFile("DELETE_EMPTY_DOWNLOAD_FOLDERS_AFTER_DOWNLOAD")
    && downloadOptionsGUI_SubmitObject.UseDefaultDownloadLocationCheckbox) {
        ; Prepares for the upcomming download folder content check.
        tmpPath := tmpConfig . "\" . downloadTime . "\media\*.*"
        if (!FileExist(tmpPath)) {
            SplitPath(tmpPath, , &outDir)
            SplitPath(outDir, , &outDir)
            try
            {
                DirDelete(outDir, true)
            }
            return
        }
    }
    ; Moves and renames all important text files into the download directory.
    try
    {
        if (FileExist(A_Temp . "\yt_dlp_download_log.txt")) {
            FileCopy(A_Temp . "\yt_dlp_download_log.txt", readConfigFile("DOWNLOAD_LOG_FILE_LOCATION"), true)
        }
        if (downloadOptionsGUI_SubmitObject.UseDefaultDownloadLocationCheckbox) {
            if (FileExist(A_Temp . "\yt_dlp_download_log.txt")) {
                ; Better alternative for FileCopy because it will append instead of overwrite the old data.
                FileAppend(FileRead(A_Temp . "\yt_dlp_download_log.txt") . "`n`n#Download time: " . downloadTime
                . "`n`n##################################################`n`n",
                tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_log.txt")
            }
            if (FileExist(readConfigFile("DOWNLOAD_ARCHIVE_LOCATION"))) {
                FileAppend(FileRead(readConfigFile("DOWNLOAD_ARCHIVE_LOCATION")) . "`n`n#: " . downloadTime
                . "`n`n##################################################`n`n",
                tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_archive.txt")
            }
            SplitPath(readConfigFile("URL_FILE_LOCATION"), , &outDir)
            if (FileExist(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt")) {
                FileAppend(FileRead(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt") . "`n`n#Download time: " .
                downloadTime
                . "`n`n##################################################`n`n",
                tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_YT_URLS.txt")
            }
        }
        else {
            if (FileExist(A_Temp . "\yt_dlp_download_log.txt")) {
                SplitPath(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit, &outFolderName)
                ; Better alternative for FileCopy because it will append instead of overwrite the old data.
                FileAppend(FileRead(A_Temp . "\yt_dlp_download_log.txt") . "`n`n#Download time: " . downloadTime
                . "`n`n##################################################`n`n",
                downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                "]_download_log.txt")
            }
            if (FileExist(readConfigFile("DOWNLOAD_ARCHIVE_LOCATION"))) {
                SplitPath(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit, &outFolderName)
                FileAppend(FileRead(readConfigFile("DOWNLOAD_ARCHIVE_LOCATION")) . "`n`n#Download time: " .
                downloadTime
                . "`n`n##################################################`n`n",
                downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                "]_download_archive.txt")
            }
            SplitPath(readConfigFile("URL_FILE_LOCATION"), , &outDir)
            if (FileExist(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt")) {
                SplitPath(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit, &outFolderName)
                FileAppend(FileRead(outDir . "\YT_URLS_CURRENTLY_DOWNLOADING.txt") . "`n`n#Download time: " .
                downloadTime
                . "`n`n##################################################`n`n",
                downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName . "]_YT_URLS.txt")
            }
        }
    }
    catch {
        MsgBox("Malfunction while writing to download log file.", "VD - Download Status - Warning!", "O Icon! T1.5")
    }

    ; Creates the download summary text file.
    try
    {
        if (downloadOptionsGUI_SubmitObject.UseDefaultDownloadLocationCheckbox) {
            FileAppend("##################################################`n`nTotal video amount: " . videoAmount .
                "`nSkipped Videos (already in archive): " . skippedVideoArchiveAmount .
                "`nSkipped Videos (already present): " . skippedVideoPresentAmount .
                "`nSkipped Videos (too large): " . skippedVideoMaxSizeAmount .
                "`nDownloaded Videos: " . downloadedVideoAmount . "`n`n",
                tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_summary.txt")
            if (downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
                FileAppend(
                    "#Notice, that playlist mode has been activated, so the values might not be correct. \(.-.)/`n`n`n",
                    tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_summary.txt")
            }
            else {
                FileAppend("`n", tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_summary.txt")
            }
            FileAppend("#Download time: " . downloadTime . "`n`n##################################################`n`n",
                tmpConfig . "\" . downloadTime . "\[" . downloadTime . "]_download_summary.txt")
        }
        else {
            SplitPath(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit, &outFolderName)
            FileAppend("##################################################`n`nTotal video amount: " . videoAmount .
                "`nSkipped Videos (already in archive): " . skippedVideoArchiveAmount .
                "`nSkipped Videos (already present): " . skippedVideoPresentAmount .
                "`nSkipped Videos (too large): " . skippedVideoMaxSizeAmount .
                "`nDownloaded Videos: " . downloadedVideoAmount . "`n`n",
                downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                "]_download_summary.txt")
            if (downloadOptionsGUI_SubmitObject.downloadWholePlaylistsCheckbox) {
                FileAppend(
                    "#Notice, that playlist mode has been activated, so the values might not be correct. \(.-.)/`n`n`n",
                    downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                    "]_download_summary.txt")
            }
            else {
                FileAppend("`n", downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                    "]_download_summary.txt")
            }
            FileAppend("#Download time: " . downloadTime . "`n`n##################################################`n`n",
                downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\[" . outFolderName .
                "]_download_summary.txt")
        }
    }

    if (downloadOptionsGUI_SubmitObject.downloadVideoCommentsCheckbox) {
        ; This is the work around for the missing --paths option for comments in yt-dlp (WIP).
        if (downloadOptionsGUI_SubmitObject.UseDefaultDownloadLocationCheckbox) {
            if (!DirExist(tmpConfig . "\" . downloadTime . "\comments")) {
                try
                {
                    DirCreate(tmpConfig . "\" . downloadTime . "\comments")
                    Sleep(500)
                }
            }
            try
            {
                FileMove(tmpConfig . "\" . downloadTime . "\media\*.info.json",
                    tmpConfig . "\" . downloadTime . "\comments", true)
            }
        }
        else {
            if (!DirExist(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\comments")) {
                try
                {
                    DirCreate(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\comments")
                    Sleep(500)
                }
            }
            try
            {
                FileMove(downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\media\*.info.json",
                    downloadOptionsGUI_SubmitObject.CustomDownloadLocationEdit . "\comments", true)
            }
        }
        ; :=> JSON prettifier here in the future.
    }
}

/*
Works together with handleDownloadOptionsGUI_MenuCheckHandler() to enable / disable certain hotkeys depending on
the checkmark array generated by the script GUI.
@param pStateArray [Array] Should be a valid state array for example the one from the config file.
*/
toggleHotkey(pStateArray) {
    ; This array will be manipulated depending on the values in the array above.
    static onOffArray := ["On", "On", "On", "On", "On", "On", "On"]

    loop (pStateArray.Length) {
        ; The old pStateArray.Get(A_Index) = true condition has been replaced for compatibillity reasons.
        if (InStr(pStateArray.Get(A_Index), "0", 0)) {
            onOffArray.InsertAt(A_Index, "Off")
        }
        else if (InStr(pStateArray.Get(A_Index), "1", 0)) {
            onOffArray.InsertAt(A_Index, "On")
        }
    }

    Hotkey(readConfigFile("TERMINATE_SCRIPT_HK"), (*) => terminateScriptPrompt(), onOffArray.Get(1))
    Hotkey(readConfigFile("RELOAD_SCRIPT_HK"), (*) => reloadScriptPrompt(), onOffArray.Get(2))
    Hotkey(readConfigFile("DOWNLOAD_HK"), (*) => startDownload(buildCommandString()), onOffArray.Get(3))
    Hotkey(readConfigFile("URL_COLLECT_HK"), (*) => saveSearchBarContentsToFile(), onOffArray.Get(4))
    Hotkey(readConfigFile("THUMBNAIL_URL_COLLECT_HK"), (*) => saveVideoURLDirectlyToFile(), onOffArray.Get(5))
    Hotkey(readConfigFile("CLEAR_URL_FILE_HK"), (*) => clearURLFile(), onOffArray.Get(6))
    Hotkey(readConfigFile("RESTORE_URL_FILE_HK"), (*) => restoreURLFile(), onOffArray.Get(7))
}

reloadScriptPrompt() {
    ; Number in seconds.
    i := 4

    reloadScriptGUI := Gui(, "VD - Reloading Script")
    textField := reloadScriptGUI.Add("Text", "r3 w260 x20 y40", "The script will be`n reloaded in " . i . " seconds.")
    textField.SetFont("s12")
    textField.SetFont("bold")
    progressBar := reloadScriptGUI.Add("Progress", "w280 h20 x10 y100", 0)
    buttonOkay := reloadScriptGUI.Add("Button", "Default w80 x60 y170", "Okay")
    buttonCancel := reloadScriptGUI.Add("Button", "w80 x160 y170", "Cancel")
    reloadScriptGUI.Show("w300 h200")

    buttonOkay.OnEvent("Click", (*) => Reload())
    buttonCancel.OnEvent("Click", (*) => reloadScriptGUI.Destroy())

    ; The try statement is needed to protect the code from crashing because
    ; of the destroyed GUI when the user presses cancel.
    try
    {
        while (i >= 0) {
            ; Makes the progress bar feel smoother.
            loop (20) {
                progressBar.Value += 1.25
                Sleep(50)
            }

            if (i = 1) {
                textField.Text := "The script will be`n reloaded in " . i . " second."
            }
            else {
                textField.Text := "The script will be`n reloaded in " . i . " seconds."
            }
            i--
        }
        textField.Text := "The script has been reloaded."
        saveGUISettingsAsPreset("last_settings", true)
        Sleep(100)
        Reload()
        ExitApp()
        ExitApp()
    }
}

terminateScriptPrompt() {
    ; Number in seconds.
    i := 4

    terminateScriptGUI := Gui(, "VD - Terminating Script")
    textField := terminateScriptGUI.Add("Text", "r3 w260 x20 y40", "The script will be`n terminated in " . i .
        " seconds.")
    textField.SetFont("s12")
    textField.SetFont("bold")
    progressBar := terminateScriptGUI.Add("Progress", "w280 h20 x10 y100 cRed backgroundBlack", 0)
    buttonOkay := terminateScriptGUI.Add("Button", "Default w80 x60 y170", "Okay")
    buttonCancel := terminateScriptGUI.Add("Button", "w80 x160 y170", "Cancel")
    terminateScriptGUI.Show("w300 h200")

    buttonOkay.OnEvent("Click", (*) => ExitApp())
    buttonCancel.OnEvent("Click", (*) => terminateScriptGUI.Destroy())

    ; The try statement is needed to protect the code from crashing because
    ; of the destroyed GUI when the user presses cancel.
    try
    {
        while (i >= 0) {
            ; Makes the progress bar feel smoother.
            loop (20) {
                progressBar.Value += 1.25
                Sleep(50)
            }

            if (i = 1) {
                textField.Text := "The script will be`n terminated in " . i . " second."
            }
            else {
                textField.Text := "The script will be`n terminated in " . i . " seconds."
            }
            i--
        }
        textField.Text := "The script has been terminated."
        Sleep(100)
        ExitApp()
        ExitApp()
    }
}

/*
Tries to find an existing process via a wildcard.
NOTE: Currently only supports wildcards containing the beginning of the wanted process.
@param pWildcard [String] Should be a wildcard process name for example "VideoDownloader.exe".
*/
findProcessWithWildcard(pWildcard) {
    SplitPath(pWildcard, , , &outExtension, &outNameNoExt)
    allRunningProcessesNameArray := []
    allRunningProcessesPathArray := []
    ; Filles the array with all existing process names.
    for (Process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")) {
        allRunningProcessesNameArray.InsertAt(A_Index, Process.Name)
        allRunningProcessesPathArray.InsertAt(A_Index, Process.CommandLine)
    }
    ; Traveres through every object to compare it with the wildcard.
    for (v in allRunningProcessesNameArray) {
        ; For example if you are process called "VideoDownloader.development-build-6.exe" it
        ; would be sufficient to search for "VideoDownloader.exe" as the [*]+ part allows an
        ; undefined amount of characters to appear between the wildcard name and it's extension.
        ; The condition below makes sure that it does not find the current instance of this script as a proces.
        if (RegExMatch(v, outNameNoExt . ".*." . outExtension) != 0 && v != A_ScriptName) {
            tmp := StrReplace(allRunningProcessesPathArray.Get(A_Index), '"')
            result := MsgBox("There is currently another instance of this script running."
                "`nName: [" . v . "]`nPath: [" . tmp . "]`nContinue at your own risk!"
                "`nPress [Retry] to terminate the other instance.", "VD - Multiple Script Instances Found!",
                "ARI Icon! 262144")

            switch (result) {
                case "Retry":
                {
                    try
                    {
                        ProcessClose(v)
                        if (ProcessWaitClose(v, 5) != 0) {
                            throw ("Could not close the other process.")
                        }
                    }
                    catch {
                        MsgBox("Could not close process :`n"
                            v . "`nTerminating script.", "VD - Close Process - Error!", "O IconX T3 262144")
                        ExitApp()
                    }
                }
                case "Ignore":
                {
                    ; This option is not recommended because the script is not supposed to run with multiple instances.
                    return
                }
                Default:
                {
                    MsgBox("Script terminated.", "VD - Script Status", "O Iconi T1.5")
                    ExitApp()
                }
                    ; Stops after the first match.
                    break
            }
        }
    }
}

/*
Reads the registry and extracts the current script version.
If the version in the registry has a build version other than 0, it will append the word "-beta".
@Returns [String] The version from the registry or "v0.0.0.1" in case the registry value is invalid.
*/
getCorrectScriptVersionFromRegistry() {
    global scriptRegistryDirectory

    regValue := RegRead(scriptRegistryDirectory, "CURRENT_VERSION", "v0.0.0.1")
    ; Finds versions matching this format [v1.2.3.4]
    if (RegExMatch(regValue, "^v\d+\.\d+\.\d+\.(\d+)$", &match)) {
        buildVersionNumber := match[1]
        ; A version number with a build version is only used for beta versions.
        if (buildVersionNumber != 0) {
            regValue := regValue . "-beta"
            ; Corrects the version number in the registry.
            RegWrite(regValue, "REG_SZ", scriptRegistryDirectory, "CURRENT_VERSION")
            return getCorrectScriptVersionFromRegistry()
        }
        return regValue
    }
    ; Finds versions matching this format [v1.2.3], [v1.2.3-beta], [1.2.3] or [1.2.3-beta].
    else if (RegExMatch(regValue, "^v?\d+\.\d+\.\d+(\.\d+)?(-beta)?$", &match)) {
        return regValue
    }
    else {
        ; In case the version in the registry is invalid.
        regValue := "v0.0.0.1"
    }
    return regValue
}

/*
Shows a prompt to change the script's working directory.
@returns [String] The path of the new working directory. Either selected by the user or set to the default directory.
*/
changeWorkingDirectory() {
    regValue := RegRead(scriptRegistryDirectory, "videoDownloaderWorkingDirectory", "")
    if (validatePath(regValue, false) && regValue != "") {
        defaultWorkingDirectory := regValue
    }
    else {
        defaultWorkingDirectory := A_AppData . "\LeoTN\VideoDownloader\VideoDownloader"
    }

    path := DirSelect("*" . defaultWorkingDirectory, 3,
        "Select a working directory. This will be the place for downloaded media, settings and presets.")
    if (checkForWritingRights(path)) {
        if (!InStr(path, "VideoDownloader")) {
            return path . "\VideoDownloader"
        }
        else {
            return path
        }
    }
    else {
        result := MsgBox("This path cannot be used.`n`n"
            "Please select another path or press [Ignore] to use the default directory which is`n"
            "[" . defaultWorkingDirectory . "].",
            "VD - Invalid Working Directory!", "ARI Icon! Default2")
        switch (result) {
            case "Retry":
            {
                return changeWorkingDirectory()
            }
            case "Ignore":
            {
                return defaultWorkingDirectory
            }
            Default:
            {
                ExitApp()
            }
        }
    }
}

/*
Checks a given path for writing permissions with the current user rights (the user who launched this script).
@returns [boolean] True, if the current permissions allow writing to the specified directory. False otherwise.
*/
checkForWritingRights(pPath) {
    try
    {
        FileAppend("checkForWritingRights", pPath . "\tmp.txt")
        FileDelete(pPath . "\tmp.txt")
    }
    catch as error {
        if (InStr(error.message, "(5) ")) {
            return false
        }
        else {
            MsgBox("[" . A_ThisFunc . "()] [ERROR]`n[" . error.message . "]", "VD - [" . A_ThisFunc . "()]")
            ExitApp()
        }
    }
    return true
}

/*
Checks all GitHub Repository tags to find new versions.
@returns [boolean] Returns true, when an update is available. False otherwise.
*/
checkForAvailableUpdates() {
    global psUpdateScriptLocation
    global scriptRegistryDirectory

    ; Does not check for updates, if there is no Internet connection or the script isn't compiled.
    if (!checkInternetConnection() || !A_IsCompiled) {
        return false
    }
    /*
    Changes "HKCU\SOFTWARE\LeoTN\VideoDownloader" to "HKCU:SOFTWARE\LeoTN\VideoDownloader"
    to make the path compatible with PowerShell.
    */
    psCompatibleScriptRegistryPath := StrReplace(scriptRegistryDirectory, "\", ":", , , 1)
    parameterString :=
        '-pGitHubRepositoryLink "https://github.com/LeoTN/yt-dlp-autohotkey-gui"' .
        ' -pRegistryDirectory "' . psCompatibleScriptRegistryPath . '"'

    if (readConfigFile("UPDATE_TO_BETA_VERSIONS")) {
        parameterString .= " -pSwitchConsiderBetaReleases"
    }
    ; Calls the PowerShell script to check for available updates.
    exitCode := RunWait('powershell.exe -executionPolicy bypass -file "'
        . psUpdateScriptLocation . '" ' . parameterString, , "Hide")
    switch (exitCode) {
        ; Available update found.
        case 101:
        {
            ; Extracts the available update from the registry.
            updateVersion := RegRead(scriptRegistryDirectory, "AVAILABLE_UPDATE", "v0.0.0.1")
            if (updateVersion == "no_available_update") {
                return false
            }
            createUpdateGUI(updateVersion)
            return true
        }
    }
    ; Maybe more cases in the future.
}

/*
Copies all files from the old version into a backup folder using robocopy.
@param pBackupParentDirectory [String] Usually the script directory with an additional folder called "VideoDownloader_old_version_backups" at the end.
*/
backupOldVersionFiles(pBackupParentDirectory) {
    global versionFullName

    oldVersion := versionFullName
    backupDate := FormatTime(A_Now, "dd.MM.yyyy_HH-mm-ss")
    backupFolderName := "VideoDownloader_backup_from_version_" . oldVersion . "_at_" . backupDate
    sourceDirectory := A_ScriptDir
    destinationDirectory := pBackupParentDirectory . "\" . backupFolderName
    ; All subdirectories and files are copied. The folder "VideoDownloader_old_version_backups" is excluded.
    parameterString := "`"" . sourceDirectory . "`" `"" . destinationDirectory . "`" /E /XD `"" . sourceDirectory .
        "\VideoDownloader_old_version_backups`""
    ; Waits 3 seconds before starting the backup process to ensure that the main script has exited already.
    Run('cmd.exe /c "timeout /t 3 /nobreak && robocopy ' . parameterString . '"', , "Hide")
    exitScriptWithNotification()
}

/*
Tries to ping google.com to determine the computer's Internet connection status.
@returns [boolean] True, if the computer is connected to the Internet. False otherwise.
*/
checkInternetConnection() {
    ; Checks if the user has an established Internet connection.
    try
    {
        httpRequest := ComObject("WinHttp.WinHttpRequest.5.1")
        httpRequest.Open("GET", "http://www.google.com", false)
        httpRequest.Send()

        if (httpRequest.Status = 200) {
            return true
        }
    }

    return false
}

/*
Terminates the script and shows a tray tip message to inform the user.
@param pBooleanUseFallbackMessage [boolean] If set to true, will use the hardcoded English version
of the termination message. This can be useful if the language modules have not been loaded yet.
*/
exitScriptWithNotification(pBooleanUseFallbackMessage := false) {
    if (pBooleanUseFallbackMessage) {
        TrayTip("VideoDownloader terminated.", "VideoDownloader - Status", "Iconi Mute")
    }
    else {
        TrayTip("VideoDownloader terminated. (NO LANGUAGE LOADED)", "VideoDownloader - Status", "Iconi Mute") ; REMOVE [ADD LANGUAGE OPTION]
    }
    ; Using ExitApp() twice ensures that the script will be terminated entirely.
    ExitApp()
    ExitApp()
}

/*
Outputs a little GUI containing information about the error. Allows to be copied to the clipboard.
@param pErrorObject [Error Object] Usually created when catching an error via Try / Catch.
@param pAdditionalErrorMessage [String] An optional error message to show.
@param pBooleanTerminatingError [boolean] If set to true, will force the script to terminate once the message disappears.
@param pMessageTimeoutMilliseconds [double] Optional message timeout. Closes the message after a delay of time.
*/
displayErrorMessage(pErrorObject := unset, pAdditionalErrorMessage := unset, pBooleanTerminatingError := false,
    pMessageTimeoutMilliseconds := unset) {
    if (IsSet(pErrorObject)) {
        errorMessageBlock := "*****ERROR MESSAGE*****`n" . pErrorObject.Message . "`n`n*****ERROR TRIGGER*****`n" .
            pErrorObject.What
        if (pErrorObject.Extra != "") {
            errorMessageBlock .= "`n`n*****ADDITIONAL INFO*****`n" . pErrorObject.Extra
        }
        errorMessageBlock .= "`n`n*****FILE*****`n" . pErrorObject.File . "`n`n*****LINE*****`n" . pErrorObject.Line
            . "`n`n*****CALL STACK*****`n" . pErrorObject.Stack
    }
    if (IsSet(pAdditionalErrorMessage)) {
        errorMessageBlock .= "`n`n#####ADDITIONAL ERROR MESSAGE#####`n" . pAdditionalErrorMessage
    }
    if (pBooleanTerminatingError) {
        errorMessageBlock .= "`n`nScript has to exit!"
    }
    if (IsSet(pMessageTimeoutMilliseconds)) {
        ; Hides the GUI and therefore
        SetTimer((*) => errorGUI.Destroy(), "-" . pMessageTimeoutMilliseconds)
    }

    funnyErrorMessageArray := Array(
        "This shouldn't have happened :(",
        "Well, this is akward...",
        "Why did we stop?!",
        "Looks like we're lost in the code jungle...",
        "That's not supposed to happen!",
        "Whoopsie daisy, looks like an error!",
        "Error 404: Sense of humor not found",
        "Looks like a glitch in the Matrix...",
        "Houston, we have a problem...",
        "Unexpected error: Please blame the developer",
        "Error: Keyboard not responding, press any key to continue... oh wait",
        "Task failed successfully!"
    )
    ; Selects a "random" funny error message to be displayed.
    funnyErrorMessage := funnyErrorMessageArray.Get(Random(1, funnyErrorMessageArray.Length))

    errorGUI := Gui(, "VideoDownloader - Error")

    errorGUIfunnyErrorMessageText := errorGUI.Add("Text", "yp+10 r4 w300", funnyErrorMessage)
    errorGUIfunnyErrorMessageText.SetFont("italic S10")
    errorGUIerrorMessageBlockText := errorGUI.Add("Text", "yp+50", errorMessageBlock)

    errorGUIbuttonGroupBox := errorGUI.Add("GroupBox", "r2.1 w340")
    errorGUIgitHubIssuePageButton := errorGUI.Add("Button", "xp+10 yp+15 w100 R2 Default",
        "Report this issue on GitHub")
    errorGUIgitHubIssuePageButton.OnEvent("Click", (*) => Run(
        "https://github.com/LeoTN/yt-dlp-autohotkey-gui/issues/new/choose"))
    errorGUIcopyErrorToClipboardButton := errorGUI.Add("Button", "xp+110 w100 R2", "Copy error to clipboard")
    errorGUIcopyErrorToClipboardButton.OnEvent("Click", (*) => A_Clipboard := errorMessageBlock)

    if (pBooleanTerminatingError) {
        errorGUIActionButton := errorGUI.Add("Button", "xp+110 w100 R2", "Exit Script")
    }
    else {
        errorGUIActionButton := errorGUI.Add("Button", "xp+110 w100 R2", "Continue Script")
    }
    errorGUIActionButton.OnEvent("Click", (*) => errorGUI.Destroy())
    errorGUI.Show()
    errorGUI.Flash()
    ; There might be an error with the while condition, once the GUI is destroyed.
    try
    {
        while (WinExist("ahk_id " . errorGUI.Hwnd)) {
            Sleep(500)
        }
    }

    if (pBooleanTerminatingError) {
        exitScriptWithNotification(true)
    }
}

/*
A simple method to convert an array into a string form.
@param pArray [Array] Should be an array to convert.
@returns [String] The array converted into a string form.
*/
arrayToString(pArray) {
    string := "["

    for (index, value in pArray) {
        string .= value
        if (index < pArray.Length) {
            string .= ","
        }
    }

    string .= "]"
    return string
}

/*
A simple method to convert a string (in array form) into an array.
@param pString [String] Should be a string (in array form) to convert.
@returns [Array] The string converted into an array form.
*/
stringToArray(pString) {
    array := StrSplit(pString, ",")
    return array
}

/*
"Decyphers" the cryptic hotkey symblos into normal words.
@param pHotkey [String] Should be a valid AutoHotkey hotkey for example "+!F4".
@returns [String] A "decyphered" AutoHotkey hotkey for example "Shift + Alt + F4".
*/
expandHotkey(pHotkey) {
    hotkeyString := pHotkey
    hotkeyString := StrReplace(hotkeyString, "+", "SHIFT + ")
    hotkeyString := StrReplace(hotkeyString, "^", "CTRL + ")
    hotkeyString := StrReplace(hotkeyString, "!", "ALT + ")
    hotkeyString := StrReplace(hotkeyString, "#", "WIN + ")

    return hotkeyString
}
