name: Build VideoDownloader MSI Installer File

on:
    workflow_dispatch:
      inputs:
        version :
          description: "Release Version"
          default: "0"
          required: true

        is_pre_release :
          description: "Pre-Release"
          default: "true"
          required: true

env:
  FINAL_EXECUTABLE_NAME: VideoDownloader.exe
  FINAL_SETUP_EXECUTABLE_NAME: VideoDownloaderSetup.exe
  FINAL_INSTALLER_NAME: VideoDownloaderInstaller.msi
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  IS_PRE_RELEASE: ${{ github.event.inputs.is_pre_release }}

jobs:
  build_exe_files:
    name: Build and Upload Executable Artifacts
    runs-on: windows-2019

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Extract Autohotkey Compiler
      run: |
        # Set Variables
        $ahkFolder = "${{ github.workspace }}\ahk"
        $ahkV2Folder = "${{ github.workspace }}\ahk-v2"

        # Extract the files.
        Expand-Archive -Path "${{ github.workspace }}\compiler\ahk.zip" -DestinationPath $ahkFolder
        Expand-Archive -Path "${{ github.workspace }}\compiler\ahk-v2.zip" -DestinationPath $ahkV2Folder

    - name: Compile Autohotkey Main Script
      run: |
        # Set the paths to execute more easily.
        $scriptPathIn = "${{ github.workspace }}\VideoDownloader.ahk"
        $scriptPathOut = "${{ github.workspace }}\$env:FINAL_EXECUTABLE_NAME"

        # Compile the script.
        ahk\Compiler\Ahk2Exe.exe /in $scriptPathIn /out $scriptPathOut /base "ahk-v2\AutoHotkey64.exe" /silent
        echo "The executable will be saved to $scriptPathOut"

    - name: Compile Autohotkey Setup Script
      run: |
        # Set the paths to execute more easily.
        $scriptPathIn = "${{ github.workspace }}\yt_dlp_autohotkey_gui_files/library/setup/VideoDownloaderSetup.ahk"
        $scriptPathOut = "${{ github.workspace }}\$env:FINAL_SETUP_EXECUTABLE_NAME"

        # Compile the script.
        ahk\Compiler\Ahk2Exe.exe /in $scriptPathIn /out $scriptPathOut /base "ahk-v2\AutoHotkey64.exe" /silent
        echo "The executable will be saved to $scriptPathOut"

    - name: Upload Main Executable as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FINAL_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\${{ env.FINAL_EXECUTABLE_NAME }}

    - name: Upload Setup Executable as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FINAL_SETUP_EXECUTABLE_NAME }}
        path: ${{ github.workspace }}\${{ env.FINAL_SETUP_EXECUTABLE_NAME }}

  build_msi_file:
    runs-on: windows-2019
    name: Build and Upload MSI Installer File
    needs: build_exe_files
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Download Main Executable Artifact
        id: download_main_executable_artifact_id
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.FINAL_EXECUTABLE_NAME }}
          path: ${{ github.workspace }}

      - name: Download Setup Executable Artifact
        id: download_setup_executable_artifact_id
        uses: actions/download-artifact@v3
        with:
         name: ${{ env.FINAL_SETUP_EXECUTABLE_NAME }}
         path: ${{ github.workspace }}\yt_dlp_autohotkey_gui_files\library\setup
        
      - name: Build .AIP Project
        uses: caphyon/advinst-github-action@main
        with:
          advinst-enable-automation: 'true'
          aip-path: ${{ github.workspace }}\compiler\VideoDownloaderInstaller.aip
          aip-build-name: DefaultBuild
          aip-package-name: ${{ env.FINAL_INSTALLER_NAME }}
          aip-output-dir:  ${{ github.workspace }}
          aip-commands: |
            SetVersion "${{ env.RELEASE_VERSION }}"
            
      - name: Upload Installer as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FINAL_INSTALLER_NAME }}
          path: ${{ github.workspace }}\${{ env.FINAL_INSTALLER_NAME }}
 
  create_release:
    name: Download Executable Artifact and Create Draft Release
    needs: build_msi_file
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
     
    - name: Download Installer Artifact
      id: download_installer_artifact_id
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.FINAL_INSTALLER_NAME }}
        path: ${{ github.workspace }}

    - name: Set Release Name
      id: set-release-name
      run: |
        if [ "${{ github.event.inputs.IS_PRE_RELEASE }}" == "true" ]; then
          releaseName="pre-${{ env.RELEASE_VERSION }}"
        else
          releaseName="v${{ env.RELEASE_VERSION }}"
        fi
        echo "::set-env name=RELEASE_NAME::$releaseName"

    - name: Print Release Name
      run: echo "RELEASE_NAME is ${{ env.RELEASE_NAME }}"
        
    - name: Create Draft Main Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: ${{steps.download_installer_artifact_id.outputs.download-path}}/${{ env.FINAL_INSTALLER_NAME }}
        artifactContentType: application/executable
        generateReleaseNotes: true
        makeLatest: true
        prerelease: ${{ env.IS_PRE_RELEASE == 'true' }}
        name: "${{steps.set_release_name_id.outputs.releaseName}}"
        tag: "${{steps.set_release_name_id.outputs.releaseName}}"

